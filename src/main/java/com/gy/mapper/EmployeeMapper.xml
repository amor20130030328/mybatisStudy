<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gy.mapper.EmployeeMapper">

	<cache type="org.mybatis.caches.ehcache.EhcacheCache"> </cache>

  <!-- 简单的映射 -->
  <resultMap type="com.gy.bean.Employee" id="employeeSimple">
  	<id column="id" property="id"/>
  	<!-- result 定义普通列的封装规则 -->
  	<result column="last_name" property="lastName"/>
  	<result column="email" property="email"/>
  	<result column="gender" property="gender"/>
  </resultMap>

  <!-- 
  	关联查询: 2,3 需要自己写出关联的查询语句  (一般多表)【嵌套结果集】
  			 1,直接写查询的pojo对应的表        (一般单表) 【分布查询】
  
   -->

   
   
  <!-- 
  	自定义结果集映射规则
  	
  	type : 自定义结果集的java类型
  	id   : 唯一的id,方便引用
  	分步查询
   -->
  <resultMap type="employee" id="employeeMap">
  	<!-- id 指定主键列的封装规则 (底层会有优化), -->
  	<id column="id" property="id"/>
  	<!-- result 定义普通列的封装规则 -->
  	<result column="last_name" property="lastName"/>
  	<result column="email" property="email"/>
  	<result column="gender" property="gender"/>
  	<association property="department" 
  	javaType="com.gy.bean.Department"
  	column="dept_id" select="com.gy.mapper.DepartmentMapper.queryById"></association>
  </resultMap>
  
  <!-- 嵌套结果集 -->
  <resultMap type="employee" id="employeeMapTwo">
	  <!-- id 指定主键列的封装规则 (底层会有优化), -->
	  	<id column="id" property="id"/>
	  	<!-- result 定义普通列的封装规则 -->
	  	<result column="lastName" property="lastName"/>
	  	<result column="email" property="email"/>
	  	<result column="gender" property="gender"/>
	  	<association javaType="com.gy.bean.Department" property="department" column="dept_id">
	  		<id property="id" column="deptId"/>
	  		<result property="location" column="location"/>
	  		<result property="deptName" column="dept_name"/> 		
	  	</association>
  </resultMap>
  
  <resultMap type="employee" id="employeeMapThree">
	  <!-- id 指定主键列的封装规则 (底层会有优化), -->
	  	<id column="id" property="id"/>
	  	<!-- result 定义普通列的封装规则 -->
	  	<result column="lastName" property="lastName"/>
	  	<result column="email" property="email"/>
	  	<result column="gender" property="gender"/>
	  	
  		<association javaType="com.gy.bean.Department" property="department" column="dept_id">
	  		<id property="id" column="deptId"/>
	  		<result property="location" column="location"/>
	  		<result property="deptName" column="dept_name"/> 		
	  	</association>		
  </resultMap>
  
  <!-- 有鉴别器的映射 -->
  <resultMap type="com.gy.bean.Employee" id="employeeDis">
   <!-- id 指定主键列的封装规则 (底层会有优化), -->
	  	<id column="id" property="id"/>
	  	<!-- result 定义普通列的封装规则 -->
	  	<result column="last_name" property="lastName"/>
	  	<result column="email" property="email"/>
	  	<result column="gender" property="gender"/>
	  	<discriminator javaType="string" column="gender">
	  		<case value="1" resultType="com.gy.bean.Employee">
	  			<association property="department" 
  					javaType="com.gy.bean.Department"
  					column="dept_id" select="com.gy.mapper.DepartmentMapper.queryById"></association>
	  		</case>
	  		<case value="0" resultType="com.gy.bean.Employee">
	  			<id column="id" property="id"/>
			  	<!-- result 定义普通列的封装规则 -->
			  	<result column="last_name" property="lastName"/>
			  	<result column="last_name" property="email"/>
			  	<result column="gender" property="gender"/>
	  		</case>
	  	</discriminator>
  
  </resultMap>


  <!-- databaseId="mysql" 表示在MySQL条件下才执行 -->
  <select id="queryById" resultMap="employeeMap"
  	databaseId="mysql">
  	select * from employee where id = #{id}
  </select> 
  
  <select id="queryByIdAndName" resultMap="employeeMap">
  	select * from employee where id = ${id} and last_name = #{lastName}
  </select>
  
  <select id="queryById" resultType="com.gy.bean.Employee">
  	select EMPLOYEE_ID id,LAST_NAME lastName,EMAIL email,
  	GENDER gender from employee where EMPLOYEE_ID = #{id}
  </select>
  
   
  <select id="querAllWithDis" resultMap="employeeDis">
    SELECT * from employee
	where id = #{id}
  </select> 
 
  
  <select id="querAll" resultMap="employeeMap">
  	SELECT * from employee
  </select> 
  
  <select id="queryByIdReturnMap" resultType="map">
  	SELECT * FROM employee where id = #{id}
  </select>
  
  <select id="queryByJobId" resultMap="employeeSimple">
  	select * from employee
  	where job_id = #{jobId}
  </select>
  
  <select id="queryAllToMap" resultType="com.gy.bean.Employee">
  	SELECT * FROM employee
  </select>
  
  <!-- 
   	获取自增主键
     	使用自增主键获取主键值 策略    useGeneratedKeys="true" 
  		查出的主键值封装给 JavaBean的  某个(id的位置) 属性
  -->
  <insert id="addEmp" parameterType="com.gy.bean.Employee" useGeneratedKeys="true"
  		keyProperty="id" databaseId="mysql">
  	INSERT INTO employee (last_name,email,gender)
  	VALUES(#{lastName},#{email},#{gender})
  </insert>
  
  <insert id="addEmp"  databaseId="oracle">
  	<!-- 
  	
  	查出的主键值封装给 JavaBean的  某个(id的位置) 属性
  	order="BEFORE" 当前sql在插入之前执行
  	resultType="Integer" : 查询的数据的返回值类型
  	
  	执行顺序: 先执行selectKey中的语句，查询出id 的值
  		     赋值给keyProperty的属性，
  	
  	 -->

  	<selectKey keyProperty="id" order="BEFORE" resultType="Integer">
  		SELECT EMP_SQE.nextVal from dual 
  	</selectKey>
	  	INSERT INTO employee (employee_id,last_name,email,gender)
	  	VALUES(#{id},#{lastName},#{email},#{gender})
  </insert>
  
  <update id="updateEmp">
  	UPDATE employee
  	SET last_name = #{lastName},email = #{email} ,gender = #{gender}
  	WHERE id = #{id}
  </update>
  
  <delete id="deleteEmp">
  	DELETE from employee where id = #{id}
  </delete>
  

</mapper>